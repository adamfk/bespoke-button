// Autogenerated with StateSmith 0.11.2-alpha+4a4e30018e9a371124530fa96cf2ba3322b80459.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

#pragma once
#include <stdint.h>

#include <stdint.h> // for fixed width integer state machine variables below

typedef enum __attribute__((packed)) BeButton1Sm_EventId
{
    BeButton1Sm_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
} BeButton1Sm_EventId;

enum
{
    BeButton1Sm_EventIdCount = 1
};

typedef enum __attribute__((packed)) BeButton1Sm_StateId
{
    BeButton1Sm_StateId_ROOT = 0,
    BeButton1Sm_StateId_PRESSED_DEBOUNCE = 1,
    BeButton1Sm_StateId_PRESSED_STABLE = 2,
    BeButton1Sm_StateId_CONFIRM_LONG = 3,
    BeButton1Sm_StateId_PRESSED_LONG = 4,
    BeButton1Sm_StateId_PRESSED_REPEAT = 5,
    BeButton1Sm_StateId_RELEASED_DEBOUNCE = 6,
    BeButton1Sm_StateId_RELEASED_STABLE = 7,
} BeButton1Sm_StateId;

enum
{
    BeButton1Sm_StateIdCount = 8
};


// Generated state machine
// forward declaration
typedef struct BeButton1Sm BeButton1Sm;

// State machine variables. Can be used for inputs, outputs, user variables...
typedef struct BeButton1Sm_Vars
{
    // you need to add your loop time to this variable in your main loop.
    // max time is 65535 ms.
    uint16_t timer_ms;
    
    // set to 1 when button is detected as active.
    uint8_t input_active: 1;
    
    // read and clear event flags in your main loop.
    uint8_t output_release_event: 1;
    uint8_t output_press_event: 1;
    uint8_t output_long_event: 1;
    uint8_t output_repeat_event: 1;
    
    // read these flags in your main loop, but don't clear them.
    // they are cleared automatically.
    uint8_t output_press: 1;
    uint8_t output_long: 1;
    uint8_t output_repeat: 1;
} BeButton1Sm_Vars;


// event handler type
typedef void (*BeButton1Sm_Func)(BeButton1Sm* sm);

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void BeButton1Sm_ctor(BeButton1Sm* sm);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void BeButton1Sm_start(BeButton1Sm* sm);

// Dispatches an event to the state machine. Not thread safe.
void BeButton1Sm_dispatch_event(BeButton1Sm* sm, BeButton1Sm_EventId event_id);

// Thread safe.
char const * BeButton1Sm_state_id_to_string(BeButton1Sm_StateId id);

// Thread safe.
char const * BeButton1Sm_event_id_to_string(BeButton1Sm_EventId id);

// Generated state machine
struct BeButton1Sm
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    BeButton1Sm_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    BeButton1Sm_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    BeButton1Sm_Func current_event_handlers[BeButton1Sm_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    BeButton1Sm_Func current_state_exit_handler;
    
    // Variables. Can be used for inputs, outputs, user variables...
    BeButton1Sm_Vars vars;
};

